#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrimaryEducationSystem.Core.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PESDB")]
	public partial class PESDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArtice(Artice instance);
    partial void UpdateArtice(Artice instance);
    partial void DeleteArtice(Artice instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertExercise(Exercise instance);
    partial void UpdateExercise(Exercise instance);
    partial void DeleteExercise(Exercise instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGameCatelogy(GameCatelogy instance);
    partial void UpdateGameCatelogy(GameCatelogy instance);
    partial void DeleteGameCatelogy(GameCatelogy instance);
    partial void InsertGameResult(GameResult instance);
    partial void UpdateGameResult(GameResult instance);
    partial void DeleteGameResult(GameResult instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertMailBox(MailBox instance);
    partial void UpdateMailBox(MailBox instance);
    partial void DeleteMailBox(MailBox instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertReply(Reply instance);
    partial void UpdateReply(Reply instance);
    partial void DeleteReply(Reply instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertTestResult(TestResult instance);
    partial void UpdateTestResult(TestResult instance);
    partial void DeleteTestResult(TestResult instance);
    partial void InsertTheory(Theory instance);
    partial void UpdateTheory(Theory instance);
    partial void DeleteTheory(Theory instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public PESDBDataContext() : 
				base(global::PrimaryEducationSystem.Core.Properties.Settings.Default.PESDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PESDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PESDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PESDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PESDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Artice> Artices
		{
			get
			{
				return this.GetTable<Artice>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Exercise> Exercises
		{
			get
			{
				return this.GetTable<Exercise>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<GameCatelogy> GameCatelogies
		{
			get
			{
				return this.GetTable<GameCatelogy>();
			}
		}
		
		public System.Data.Linq.Table<GameResult> GameResults
		{
			get
			{
				return this.GetTable<GameResult>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<MailBox> MailBoxes
		{
			get
			{
				return this.GetTable<MailBox>();
			}
		}
		
		public System.Data.Linq.Table<Part> Parts
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Reply> Replies
		{
			get
			{
				return this.GetTable<Reply>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<TestResult> TestResults
		{
			get
			{
				return this.GetTable<TestResult>();
			}
		}
		
		public System.Data.Linq.Table<Theory> Theories
		{
			get
			{
				return this.GetTable<Theory>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.ARTICE")]
	public partial class Artice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private string _Title;
		
		private string _Contents;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Artice()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ArticleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="USER_ARTICE", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Artices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Artices.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.USER_GROUP")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private System.Nullable<int> _RoleID;
		
		private string _GroupName;
		
		private string _Description;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UserGroup()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(100)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="USER_GROUP_USER", Storage="_Users", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="ROLE_USER_GROUP", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[Table(Name="dbo.CLASS")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private string _ClassName;
		
		private EntitySet<Subject> _Subjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    #endregion
		
		public Class()
		{
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			OnCreated();
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="NVarChar(50)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Association(Name="CLASS_SUBJECT", Storage="_Subjects", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[Table(Name="dbo.EXERCISE")]
	public partial class Exercise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExerciseID;
		
		private System.Nullable<int> _LessonID;
		
		private string _Contents;
		
		private string _Result;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExerciseIDChanging(int value);
    partial void OnExerciseIDChanged();
    partial void OnLessonIDChanging(System.Nullable<int> value);
    partial void OnLessonIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public Exercise()
		{
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[Column(Storage="_ExerciseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExerciseID
		{
			get
			{
				return this._ExerciseID;
			}
			set
			{
				if ((this._ExerciseID != value))
				{
					this.OnExerciseIDChanging(value);
					this.SendPropertyChanging();
					this._ExerciseID = value;
					this.SendPropertyChanged("ExerciseID");
					this.OnExerciseIDChanged();
				}
			}
		}
		
		[Column(Storage="_LessonID", DbType="Int")]
		public System.Nullable<int> LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_Result", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[Association(Name="LESSON_EXERCISE", Storage="_Lesson", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Exercises.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Exercises.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GAME")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private System.Nullable<int> _GameCategoryID;
		
		private string _GameName;
		
		private string _GameType;
		
		private string _Help;
		
		private EntitySet<GameResult> _GameResults;
		
		private EntityRef<GameCatelogy> _GameCatelogy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnGameCategoryIDChanging(System.Nullable<int> value);
    partial void OnGameCategoryIDChanged();
    partial void OnGameNameChanging(string value);
    partial void OnGameNameChanged();
    partial void OnGameTypeChanging(string value);
    partial void OnGameTypeChanged();
    partial void OnHelpChanging(string value);
    partial void OnHelpChanged();
    #endregion
		
		public Game()
		{
			this._GameResults = new EntitySet<GameResult>(new Action<GameResult>(this.attach_GameResults), new Action<GameResult>(this.detach_GameResults));
			this._GameCatelogy = default(EntityRef<GameCatelogy>);
			OnCreated();
		}
		
		[Column(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameCategoryID", DbType="Int")]
		public System.Nullable<int> GameCategoryID
		{
			get
			{
				return this._GameCategoryID;
			}
			set
			{
				if ((this._GameCategoryID != value))
				{
					if (this._GameCatelogy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._GameCategoryID = value;
					this.SendPropertyChanged("GameCategoryID");
					this.OnGameCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameName", DbType="NVarChar(250)")]
		public string GameName
		{
			get
			{
				return this._GameName;
			}
			set
			{
				if ((this._GameName != value))
				{
					this.OnGameNameChanging(value);
					this.SendPropertyChanging();
					this._GameName = value;
					this.SendPropertyChanged("GameName");
					this.OnGameNameChanged();
				}
			}
		}
		
		[Column(Storage="_GameType", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Help", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Help
		{
			get
			{
				return this._Help;
			}
			set
			{
				if ((this._Help != value))
				{
					this.OnHelpChanging(value);
					this.SendPropertyChanging();
					this._Help = value;
					this.SendPropertyChanged("Help");
					this.OnHelpChanged();
				}
			}
		}
		
		[Association(Name="GAME_GAME_RESULT", Storage="_GameResults", ThisKey="GameID", OtherKey="GameID")]
		public EntitySet<GameResult> GameResults
		{
			get
			{
				return this._GameResults;
			}
			set
			{
				this._GameResults.Assign(value);
			}
		}
		
		[Association(Name="GAME_CATEGORY_GAME", Storage="_GameCatelogy", ThisKey="GameCategoryID", OtherKey="GameCategoryID", IsForeignKey=true)]
		public GameCatelogy GameCatelogy
		{
			get
			{
				return this._GameCatelogy.Entity;
			}
			set
			{
				GameCatelogy previousValue = this._GameCatelogy.Entity;
				if (((previousValue != value) 
							|| (this._GameCatelogy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameCatelogy.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._GameCatelogy.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._GameCategoryID = value.GameCategoryID;
					}
					else
					{
						this._GameCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GameCatelogy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.GAME_CATEGORY")]
	public partial class GameCatelogy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameCategoryID;
		
		private System.Nullable<int> _GameID;
		
		private string _GameCategoryname;
		
		private System.Nullable<bool> _IsShowInHomePage;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameCategoryIDChanging(int value);
    partial void OnGameCategoryIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnGameCategorynameChanging(string value);
    partial void OnGameCategorynameChanged();
    partial void OnIsShowInHomePageChanging(System.Nullable<bool> value);
    partial void OnIsShowInHomePageChanged();
    #endregion
		
		public GameCatelogy()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[Column(Storage="_GameCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameCategoryID
		{
			get
			{
				return this._GameCategoryID;
			}
			set
			{
				if ((this._GameCategoryID != value))
				{
					this.OnGameCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._GameCategoryID = value;
					this.SendPropertyChanged("GameCategoryID");
					this.OnGameCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameCategoryname", DbType="NVarChar(250)")]
		public string GameCategoryname
		{
			get
			{
				return this._GameCategoryname;
			}
			set
			{
				if ((this._GameCategoryname != value))
				{
					this.OnGameCategorynameChanging(value);
					this.SendPropertyChanging();
					this._GameCategoryname = value;
					this.SendPropertyChanged("GameCategoryname");
					this.OnGameCategorynameChanged();
				}
			}
		}
		
		[Column(Storage="_IsShowInHomePage", DbType="Bit")]
		public System.Nullable<bool> IsShowInHomePage
		{
			get
			{
				return this._IsShowInHomePage;
			}
			set
			{
				if ((this._IsShowInHomePage != value))
				{
					this.OnIsShowInHomePageChanging(value);
					this.SendPropertyChanging();
					this._IsShowInHomePage = value;
					this.SendPropertyChanged("IsShowInHomePage");
					this.OnIsShowInHomePageChanged();
				}
			}
		}
		
		[Association(Name="GAME_CATEGORY_GAME", Storage="_Games", ThisKey="GameCategoryID", OtherKey="GameCategoryID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameCatelogy = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.GameCatelogy = null;
		}
	}
	
	[Table(Name="dbo.GAME_RESULT")]
	public partial class GameResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameResultID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private string _GameScores;
		
		private string _GameType;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameResultIDChanging(int value);
    partial void OnGameResultIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnGameScoresChanging(string value);
    partial void OnGameScoresChanged();
    partial void OnGameTypeChanging(string value);
    partial void OnGameTypeChanged();
    #endregion
		
		public GameResult()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_GameResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameResultID
		{
			get
			{
				return this._GameResultID;
			}
			set
			{
				if ((this._GameResultID != value))
				{
					this.OnGameResultIDChanging(value);
					this.SendPropertyChanging();
					this._GameResultID = value;
					this.SendPropertyChanged("GameResultID");
					this.OnGameResultIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameScores", DbType="NVarChar(50)")]
		public string GameScores
		{
			get
			{
				return this._GameScores;
			}
			set
			{
				if ((this._GameScores != value))
				{
					this.OnGameScoresChanging(value);
					this.SendPropertyChanging();
					this._GameScores = value;
					this.SendPropertyChanged("GameScores");
					this.OnGameScoresChanged();
				}
			}
		}
		
		[Column(Storage="_GameType", DbType="NVarChar(50)")]
		public string GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[Association(Name="GAME_GAME_RESULT", Storage="_Game", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameResults.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameResults.Add(this);
						this._GameID = value.GameID;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="USER_GAME_RESULT", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameResults.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameResults.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LESSON")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LessonID;
		
		private System.Nullable<int> _PartID;
		
		private string _LessonName;
		
		private string _Description;
		
		private EntitySet<Exercise> _Exercises;
		
		private EntitySet<Theory> _Theories;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnPartIDChanging(System.Nullable<int> value);
    partial void OnPartIDChanged();
    partial void OnLessonNameChanging(string value);
    partial void OnLessonNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Lesson()
		{
			this._Exercises = new EntitySet<Exercise>(new Action<Exercise>(this.attach_Exercises), new Action<Exercise>(this.detach_Exercises));
			this._Theories = new EntitySet<Theory>(new Action<Theory>(this.attach_Theories), new Action<Theory>(this.detach_Theories));
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[Column(Storage="_LessonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartID", DbType="Int")]
		public System.Nullable<int> PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[Column(Storage="_LessonName", DbType="NVarChar(150)")]
		public string LessonName
		{
			get
			{
				return this._LessonName;
			}
			set
			{
				if ((this._LessonName != value))
				{
					this.OnLessonNameChanging(value);
					this.SendPropertyChanging();
					this._LessonName = value;
					this.SendPropertyChanged("LessonName");
					this.OnLessonNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="LESSON_EXERCISE", Storage="_Exercises", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<Exercise> Exercises
		{
			get
			{
				return this._Exercises;
			}
			set
			{
				this._Exercises.Assign(value);
			}
		}
		
		[Association(Name="LESSON_THEORY", Storage="_Theories", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<Theory> Theories
		{
			get
			{
				return this._Theories;
			}
			set
			{
				this._Theories.Assign(value);
			}
		}
		
		[Association(Name="PART_LESSON", Storage="_Part", ThisKey="PartID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._PartID = value.PartID;
					}
					else
					{
						this._PartID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Exercises(Exercise entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_Theories(Theory entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Theories(Theory entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
	}
	
	[Table(Name="dbo.[LOG]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Contents;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
		
		public Log()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Association(Name="USER_LOG", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MAIL_BOX")]
	public partial class MailBox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MailBoxID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private string _Subject;
		
		private string _Contents;
		
		private System.Nullable<bool> _Type;
		
		private string _UserSend;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMailBoxIDChanging(int value);
    partial void OnMailBoxIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnTypeChanging(System.Nullable<bool> value);
    partial void OnTypeChanged();
    partial void OnUserSendChanging(string value);
    partial void OnUserSendChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public MailBox()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_MailBoxID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MailBoxID
		{
			get
			{
				return this._MailBoxID;
			}
			set
			{
				if ((this._MailBoxID != value))
				{
					this.OnMailBoxIDChanging(value);
					this.SendPropertyChanging();
					this._MailBoxID = value;
					this.SendPropertyChanged("MailBoxID");
					this.OnMailBoxIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(250)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Bit")]
		public System.Nullable<bool> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UserSend", DbType="NVarChar(50)")]
		public string UserSend
		{
			get
			{
				return this._UserSend;
			}
			set
			{
				if ((this._UserSend != value))
				{
					this.OnUserSendChanging(value);
					this.SendPropertyChanging();
					this._UserSend = value;
					this.SendPropertyChanged("UserSend");
					this.OnUserSendChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="USER_MAIL_BOX", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MailBoxes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MailBoxes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PART")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartID;
		
		private System.Nullable<int> _SubjectID;
		
		private string _PartName;
		
		private string _Description;
		
		private EntitySet<Lesson> _Lessons;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartIDChanging(int value);
    partial void OnPartIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnPartNameChanging(string value);
    partial void OnPartNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Part()
		{
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[Column(Storage="_PartID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectID", DbType="Int")]
		public System.Nullable<int> SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartName", DbType="NVarChar(100)")]
		public string PartName
		{
			get
			{
				return this._PartName;
			}
			set
			{
				if ((this._PartName != value))
				{
					this.OnPartNameChanging(value);
					this.SendPropertyChanging();
					this._PartName = value;
					this.SendPropertyChanged("PartName");
					this.OnPartNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="PART_LESSON", Storage="_Lessons", ThisKey="PartID", OtherKey="PartID")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[Association(Name="PART_TEST", Storage="_Tests", ThisKey="PartID", OtherKey="PartID")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[Association(Name="SUBJECT_PART", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Parts.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Parts.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
	}
	
	[Table(Name="dbo.QUESTION")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private System.Nullable<int> _TestID;
		
		private string _Answer;
		
		private EntitySet<Reply> _Replies;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnTestIDChanging(System.Nullable<int> value);
    partial void OnTestIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public Question()
		{
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[Column(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestID", DbType="Int")]
		public System.Nullable<int> TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="NVarChar(500)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Association(Name="QUESTION_REPLY", Storage="_Replies", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[Association(Name="TEST_QUESTION", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.REPLY")]
	public partial class Reply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplyID;
		
		private System.Nullable<int> _QuestionID;
		
		private string _Contents;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplyIDChanging(int value);
    partial void OnReplyIDChanged();
    partial void OnQuestionIDChanging(System.Nullable<int> value);
    partial void OnQuestionIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
		
		public Reply()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_ReplyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplyID
		{
			get
			{
				return this._ReplyID;
			}
			set
			{
				if ((this._ReplyID != value))
				{
					this.OnReplyIDChanging(value);
					this.SendPropertyChanging();
					this._ReplyID = value;
					this.SendPropertyChanged("ReplyID");
					this.OnReplyIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="Int")]
		public System.Nullable<int> QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NVarChar(500)")]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Association(Name="QUESTION_REPLY", Storage="_Question", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ROLE")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<UserGroup> _UserGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Role()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			OnCreated();
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="ROLE_USER_GROUP", Storage="_UserGroups", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.SUBJECT")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private System.Nullable<int> _ClassID;
		
		private string _SubjectName;
		
		private string _Description;
		
		private EntitySet<Part> _Parts;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnClassIDChanging(System.Nullable<int> value);
    partial void OnClassIDChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Subject()
		{
			this._Parts = new EntitySet<Part>(new Action<Part>(this.attach_Parts), new Action<Part>(this.detach_Parts));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[Column(Storage="_SubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int")]
		public System.Nullable<int> ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectName", DbType="NVarChar(100)")]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SUBJECT_PART", Storage="_Parts", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<Part> Parts
		{
			get
			{
				return this._Parts;
			}
			set
			{
				this._Parts.Assign(value);
			}
		}
		
		[Association(Name="CLASS_SUBJECT", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parts(Part entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Parts(Part entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[Table(Name="dbo.TEST")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestID;
		
		private System.Nullable<int> _PartID;
		
		private string _TestName;
		
		private System.Nullable<int> @__Level;
		
		private System.Nullable<int> _Quantity;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<TestResult> _TestResults;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnPartIDChanging(System.Nullable<int> value);
    partial void OnPartIDChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void On_LevelChanging(System.Nullable<int> value);
    partial void On_LevelChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public Test()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[Column(Storage="_TestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartID", DbType="Int")]
		public System.Nullable<int> PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestName", DbType="NVarChar(50)")]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[Column(Name="[_Level]", Storage="__Level", DbType="Int")]
		public System.Nullable<int> _Level
		{
			get
			{
				return this.@__Level;
			}
			set
			{
				if ((this.@__Level != value))
				{
					this.On_LevelChanging(value);
					this.SendPropertyChanging();
					this.@__Level = value;
					this.SendPropertyChanged("_Level");
					this.On_LevelChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="TEST_QUESTION", Storage="_Questions", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[Association(Name="TEST_TEST_RESULT", Storage="_TestResults", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[Association(Name="PART_TEST", Storage="_Part", ThisKey="PartID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._PartID = value.PartID;
					}
					else
					{
						this._PartID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[Table(Name="dbo.TEST_RESULT")]
	public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestResultID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<int> _TestID;
		
		private System.Nullable<int> _Time;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Result;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestResultIDChanging(int value);
    partial void OnTestResultIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnTestIDChanging(System.Nullable<int> value);
    partial void OnTestIDChanged();
    partial void OnTimeChanging(System.Nullable<int> value);
    partial void OnTimeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public TestResult()
		{
			this._Test = default(EntityRef<Test>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_TestResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestResultID
		{
			get
			{
				return this._TestResultID;
			}
			set
			{
				if ((this._TestResultID != value))
				{
					this.OnTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._TestResultID = value;
					this.SendPropertyChanged("TestResultID");
					this.OnTestResultIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TestID", DbType="Int")]
		public System.Nullable<int> TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="Int")]
		public System.Nullable<int> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Result", DbType="NChar(10)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[Association(Name="TEST_TEST_RESULT", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[Association(Name="USER_TEST_RESULT", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.THEORY")]
	public partial class Theory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TheoryID;
		
		private System.Nullable<int> _LessonID;
		
		private string _Contents;
		
		private string _Description;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTheoryIDChanging(int value);
    partial void OnTheoryIDChanged();
    partial void OnLessonIDChanging(System.Nullable<int> value);
    partial void OnLessonIDChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Theory()
		{
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[Column(Storage="_TheoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TheoryID
		{
			get
			{
				return this._TheoryID;
			}
			set
			{
				if ((this._TheoryID != value))
				{
					this.OnTheoryIDChanging(value);
					this.SendPropertyChanging();
					this._TheoryID = value;
					this.SendPropertyChanged("TheoryID");
					this.OnTheoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_LessonID", DbType="Int")]
		public System.Nullable<int> LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="LESSON_THEORY", Storage="_Lesson", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Theories.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Theories.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[USER]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private string _FistName;
		
		private string _LastName;
		
		private string _UserName;
		
		private string _FamilyName;
		
		private string _Email;
		
		private string _PassWord;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _DateRegister;
		
		private EntitySet<Artice> _Artices;
		
		private EntitySet<GameResult> _GameResults;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<MailBox> _MailBoxes;
		
		private EntitySet<TestResult> _TestResults;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnFistNameChanging(string value);
    partial void OnFistNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDateRegisterChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRegisterChanged();
    #endregion
		
		public User()
		{
			this._Artices = new EntitySet<Artice>(new Action<Artice>(this.attach_Artices), new Action<Artice>(this.detach_Artices));
			this._GameResults = new EntitySet<GameResult>(new Action<GameResult>(this.attach_GameResults), new Action<GameResult>(this.detach_GameResults));
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._MailBoxes = new EntitySet<MailBox>(new Action<MailBox>(this.attach_MailBoxes), new Action<MailBox>(this.detach_MailBoxes));
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_FistName", DbType="NVarChar(50)")]
		public string FistName
		{
			get
			{
				return this._FistName;
			}
			set
			{
				if ((this._FistName != value))
				{
					this.OnFistNameChanging(value);
					this.SendPropertyChanging();
					this._FistName = value;
					this.SendPropertyChanged("FistName");
					this.OnFistNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FamilyName", DbType="NVarChar(50)")]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PassWord", DbType="NVarChar(50)")]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_DateRegister", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateRegister
		{
			get
			{
				return this._DateRegister;
			}
			set
			{
				if ((this._DateRegister != value))
				{
					this.OnDateRegisterChanging(value);
					this.SendPropertyChanging();
					this._DateRegister = value;
					this.SendPropertyChanged("DateRegister");
					this.OnDateRegisterChanged();
				}
			}
		}
		
		[Association(Name="USER_ARTICE", Storage="_Artices", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Artice> Artices
		{
			get
			{
				return this._Artices;
			}
			set
			{
				this._Artices.Assign(value);
			}
		}
		
		[Association(Name="USER_GAME_RESULT", Storage="_GameResults", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<GameResult> GameResults
		{
			get
			{
				return this._GameResults;
			}
			set
			{
				this._GameResults.Assign(value);
			}
		}
		
		[Association(Name="USER_LOG", Storage="_Logs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[Association(Name="USER_MAIL_BOX", Storage="_MailBoxes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MailBox> MailBoxes
		{
			get
			{
				return this._MailBoxes;
			}
			set
			{
				this._MailBoxes.Assign(value);
			}
		}
		
		[Association(Name="USER_TEST_RESULT", Storage="_TestResults", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[Association(Name="USER_GROUP_USER", Storage="_UserGroup", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artices(Artice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Artices(Artice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameResults(GameResult entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MailBoxes(MailBox entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MailBoxes(MailBox entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
